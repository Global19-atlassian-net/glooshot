syntax = "proto3";
package glooshot.solo.io;
option go_package = "github.com/solo-io/glooshot/pkg/api/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

import "google/protobuf/duration.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "github.com/solo-io/supergloo/api/v1/routing.proto";

/*
Describes an Experiment that GlooShot should run
*/
message Experiment {
    option (core.solo.io.resource).short_name = "exp";
    option (core.solo.io.resource).plural_name = "experiments";

    // the object metadata for this resource
    core.solo.io.Metadata metadata = 1 [(gogoproto.nullable) = false];

    // indicates whether or not the spec is valid
    // set by glooshot, intended to be read by clients
    core.solo.io.Status status = 3 [(gogoproto.nullable) = false];

    // configuration for the Experiment
    ExperimentSpec spec = 2;

    enum State {
        // Experiment has not started
        Pending = 0;

        // Experiment started but threshold not met
        Started = 1;

        // Experiment failed, threshold was exceeded
        Failed = 2;

        // Experiment succeeded, duration elapsed
        // If duration is not specified, the Experiment will never
        // be marked Succeeded
        Succeeded = 3;
    }

    // the current state of the experiment as reported by glooshot
    State state = 4;
}

message ExperimentSpec {
    // decribes a single fault to  inject
    message InjectedFault {
        // if specified, the fault will only apply to requests sent from pods sharing these labels
        map<string, string> source_labels = 1;
        // if specified, the fault will only apply to requests sent to pods sharing these labels
        map<string, string> destination_labels = 2;
        // the type of fault to inject
        supergloo.solo.io.FaultInjection fault = 3;
    }

    // the faults this experiment will inject
    // if empty, Glooshit will run a "control" experiment with no faults injected
    repeated InjectedFault faults = 1;

    // conditions on which to stop the experiment and mark it as failed
    repeated FailureCondition failure_conditions = 2;

    // the duration for which to run the experiment
    // if missing or set to 0 the experiment will run indefinitely
    // only Experiments with a timeout can succeed
    google.protobuf.Duration duration = 1 [(gogoproto.stdduration) = true];
}

// a condition based on an observed prometheus metric
message FailureCondition {
    // the name of the metric to monitor
    string metric_name  = 1;

    // consider the failure condition met if the metric falls below this threshold
    double threshold_value = 2;

    // the comparison operator to use when comparing the threshold and observed metric values
    // if the comparison evaluates to true, the failure condition will be considered met
    // possible values are '==', '>', '<', '>=', and '<='
    // defaults to '<'
    string comparison_operator = 3;
}

/*
install&setup

deploy demo app
-

run
-

load tool



api
- plan - how often to execute the experiment




- pubsub for prometheus queries
- interface for the supergloo apis glooshot needs and nothing more







*/